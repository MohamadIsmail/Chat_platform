version: '3.8'

services:
  # PostgreSQL with Citus Extension
  postgres:
    image: citusdata/citus:12.1
    container_name: chat_postgres
    environment:
      POSTGRES_DB: chat_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    networks:
      - chat_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d chat_platform"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: chat_redis
    command: redis-server --appendonly yes --requirepass redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - chat_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # FastAPI Application
  app:
    build: .
    container_name: chat_app
    environment:
      # Database configuration
      DATABASE_URL: postgresql+asyncpg://postgres:postgres_password@postgres:5432/chat_platform
      USE_SQLITE_FALLBACK: "false"
      
      # Redis configuration
      REDIS_URL: redis://redis:6379/0
      REDIS_PASSWORD: redis_password
      REDIS_MAX_CONNECTIONS: 20
      REDIS_RETRY_ON_TIMEOUT: "true"
      
      # Cache settings
      CACHE_ENABLED: "true"
      CACHE_DEFAULT_TTL: 3600
      CACHE_USER_TTL: 1800
      CACHE_MESSAGE_TTL: 300
      CACHE_CONVERSATION_TTL: 600
      
      # Application settings
      SECRET_KEY: your-super-secret-key-change-in-production
      DEBUG: "true"
      HOST: 0.0.0.0
      PORT: 8000
      
      # Citus settings
      CITUS_ENABLED: "true"
      CITUS_DISTRIBUTION_COLUMN: user_id
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app/app
      - ./config.py:/app/config.py
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - chat_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: chat_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - chat_network
    restart: unless-stopped
    profiles:
      - production

  # PgAdmin (Database Management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: chat_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@chatplatform.com
      PGADMIN_DEFAULT_PASSWORD: admin_password
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - chat_network
    restart: unless-stopped
    profiles:
      - development

  # Redis Commander (Redis Management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: chat_redis_commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis_password
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - chat_network
    restart: unless-stopped
    profiles:
      - development

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: chat_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - chat_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: chat_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin_password}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
      - loki
    networks:
      - chat_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Loki (Log Aggregation)
  loki:
    image: grafana/loki:latest
    container_name: chat_loki
    ports:
      - "3100:3100"
    volumes:
      - ./docker/loki/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - chat_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Promtail (Log Collection)
  promtail:
    image: grafana/promtail:latest
    container_name: chat_promtail
    volumes:
      - ./docker/promtail/promtail.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - chat_network
    restart: unless-stopped
    profiles:
      - monitoring

  # PostgreSQL Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: chat_postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres_password@postgres:5432/chat_platform?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - postgres
    networks:
      - chat_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: chat_redis_exporter
    environment:
      REDIS_ADDR: "redis://redis:6379"
      REDIS_PASSWORD: "redis_password"
    ports:
      - "9121:9121"
    depends_on:
      - redis
    networks:
      - chat_network
    restart: unless-stopped
    profiles:
      - monitoring

  # cAdvisor (Container Metrics)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: chat_cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - chat_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Node Exporter (System Metrics)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: chat_node_exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - chat_network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  chat_network:
    driver: bridge
